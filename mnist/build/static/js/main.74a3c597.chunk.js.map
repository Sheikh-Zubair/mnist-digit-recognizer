{"version":3,"sources":["actions/index.js","components/drawing_board.js","App.js","reducers/index.js","reducers/predict_result_reducer.js","serviceWorker.js","index.js"],"names":["predict","img_data","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","res","wrap","_context","prev","next","axios","post","sent","console","log","data","type","payload","result","stop","_x","apply","this","arguments","logout","DrawingBooard","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","signature","canvas","document","querySelector","style","display","draw","SignaturePad","minWidth","maxWidth","dotSize","penColor","setState","image","toDataURL","props","clear","_this2","react_default","createElement","className","id","height","width","class","onClick","img","reset","renderThis","Component","connect","actions","App","drawing_board","combineReducers","length","undefined","action","Boolean","window","location","hostname","match","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74a3c597.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const predict = img_data => async dispatch => {\n    const res = await axios.post('/api/predict', {img_data});\n    console.log(res.data);\n\n    dispatch({ type: 'result', payload: res.data.result });\n };\n\n\n export const logout = () => {\n     return {\n         type: 'logout',\n         payload: null\n     }\n }","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport SignaturePad from 'signature_pad'\nimport '../App.css';\nimport * as actions from '../actions/index'\n\nclass DrawingBooard extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n            signature: '',\n            canvas: ''\n        }\n    }\n\n    componentDidMount() {\n        document.querySelector('#result').style.display = 'none';\n        this.draw();\n    }\n    draw() {\n        let canvas = document.querySelector(\"#canv\");\n        let signature = new SignaturePad(canvas, {\n            minWidth: 15,\n            maxWidth: 20,\n            dotSize: 10,\n            penColor: 'black'\n        });\n        this.setState({signature, canvas})\n    }\n    img() {\n        let image = this.state.signature.toDataURL()\n        console.log(image)\n        this.props.predict(image)\n        document.querySelector('#result').style.display = 'block';\n    }\n    reset() {\n        this.state.signature.clear();\n        this.props.logout()\n        document.querySelector('#result').style.display = 'none';\n    }\n    renderThis() {\n        return (\n            <div className=\"container\">\n            <header id=\"heading\">\n                <h1>MNIST number predictor</h1>\n            </header>\n                <div className=\"row justify-content-around\">\n                    <div className=\"col-md-6 col-xs-8\">\n                        <h2>Draw number</h2>\n                        <div id=\"box\">\n                            <canvas height=\"280\" width=\"280\" id=\"canv\"></canvas>\n                        </div>\n                    </div>\n                    <div class=\"clearfix visible-xs\"></div>\n                    <div className=\"col-md-4 col-xs-4 col-md-push-2\" id=\"result\">\n                        <h2>Prediction</h2>\n                        <div id=\"result\">{this.props.result || 'Predicting....'}</div>\n                    </div> \n                </div>\n                <div className=\"row justify-content-center align-items-center\">\n                    <div className=\"col-md-3 col-xs-4\">\n                        <button className=\"btn btn-primary\" onClick={() => this.img()}>Predict</button>\n                    </div>\n                    <div className=\"col-md-2 col-xs-8 offset-xs-2\">\n                        <button className=\"btn btn-warning\" onClick={() => this.reset()}>Reset</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    render() {\n        return (\n            <div>\n                {this.renderThis()}\n            </div>\n        );\n    }\n}\nconst mapStateToProps = ({result}) => ({result})\n\nexport default connect(mapStateToProps, actions)(DrawingBooard);","import React, { Component } from 'react';\nimport DrawingBoard from './components/drawing_board';\nclass App extends Component {\n \n  render() {\n    return (\n      <div className=\"App\" >\n        <DrawingBoard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport result from './predict_result_reducer';\n\nexport default combineReducers({\n    result\n});","const res = 'result'\nconst logout = 'logout'\n\nexport default function (state = null, action) {\n    switch (action.type) {\n        case res:\n            return action.payload || false;\n        case logout:\n            return state=null;\n        default:\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport './index.css';\nimport App from './App';\nimport reducer from './reducers/index'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}